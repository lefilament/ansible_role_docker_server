---

## Install Docker packages
- name: Install apt-transport-https package
  apt:
    name: apt-transport-https
    install_recommends: no
    state: latest
  when: ansible_os_family == "Debian"

# TODO-PI update for getting proper packages for Raspbian - add packages libffi-dev libssl-dev
- name: Add Docker GPG key to APT
  apt_key:
    url: https://download.docker.com/linux/{{ ansible_distribution|lower }}/gpg
  when:  ansible_os_family == "Debian"

- name: Add Docker repo to APT repositories for x86_64 architecture
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }}/ {{ ansible_distribution_release|lower }} stable
  when: ansible_os_family == "Debian" and ansible_architecture == "x86_64"

- name: Add Docker repo to APT repositories for ARM 64 architecture
  apt_repository:
    repo: deb [arch=arm64] https://download.docker.com/linux/{{ ansible_distribution|lower }}/ {{ ansible_distribution_release|lower }} stable
  when: ansible_os_family == "Debian" and ansible_architecture == "aarch64"

- name: Add Docker repo to YUM repositories
  yum_repository:
    file: docker-ce
    name: docker-ce-stable
    description: Docker CE Stable - $basearch
    baseurl: https://download.docker.com/linux/centos/7/$basearch/stable
    gpgkey: https://download.docker.com/linux/centos/gpg
    gpgcheck: yes
  when: ansible_os_family == "RedHat"

- name: Remove old Debian Docker packages if present
  apt:
    name: ['containerd', 'docker', 'docker-engine', 'docker.io', 'runc' ]
    state: absent
    autoremove: yes
  when: ansible_os_family == "Debian"

- name: Remove old RedHat Docker packages if present
  yum:
    name: ['docker', 'docker-client', 'docker-client-latest', 'docker-common', 'docker-engine', 'docker-latest', 'docker-latest-logrotate', 'docker-logrotate']
    state: absent
  when: ansible_os_family == "RedHat"

- name: Install Debian OS packages
  apt:
    name: ['git', 'ca-certificates', 'curl', 'software-properties-common', 'docker-ce', 'python3-pip', 'python3-setuptools', 'python3-dev', 'python3-docker', 'build-essential']
    state: latest
    update_cache: yes
    force: yes
    install_recommends: no
  async: 120
  poll: 10
  when: not ansible_check_mode and ansible_os_family == "Debian"

- name : Install RedHat OS packages
  yum:
    name: ['device-mapper-persistent-data', 'lvm2', 'docker-ce', 'python3-pip', 'python3-setuptools', 'python3-devel', 'python3-docker', 'gcc']
    update_cache: yes
  async: 120
  poll: 10
  when: not ansible_check_mode and ansible_os_family == "RedHat"

- name: Check installed Debian OS packages
  apt:
    name: ['git', 'ca-certificates', 'curl', 'software-properties-common', 'docker-ce', 'python3-pip', 'python3-setuptools', 'python3-dev', 'python3-docker', 'build-essential']
    state: latest
    update_cache: yes
    force: yes
    install_recommends: no
  when: ansible_check_mode and ansible_os_family == "Debian"

- name : Check installed RedHat OS packages
  yum:
    name: ['device-mapper-persistent-data', 'lvm2', 'docker-ce', 'python3-pip', 'python3-setuptools', 'python3-devel', 'python3-docker', 'gcc']
    update_cache: yes
  when: ansible_check_mode and ansible_os_family == "RedHat"

- name: Install docker compose
  pip:
    name: ['docker-compose']
    executable: /usr/bin/pip3
    state: latest

- name: securize docker daemon
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: restart docker daemon

- name: Create docker repo
  file:
    name: /home/docker/backups
    state: directory
    owner: root
    group: root

## Install Proxy docker
- name: Create Inverse Proxy docker structure on server in /home/docker/inverseproxy
  file:
    name: /home/docker/inverseproxy
    state: directory
    owner: root
    group: root
  tags: docker_proxy

- name: Install proxy docker
  template:
    src: inverseproxy.yaml.j2
    dest: /home/docker/inverseproxy/docker-compose.yaml
    owner: root
    group: root
    mode: '0644'
  tags: docker_proxy
  notify:
    - start inverseproxy docker

- name: Copy Traefik configuration file
  template:
    src: traefik.toml.j2
    dest: "/home/docker/inverseproxy/traefik.toml"
    owner: root
    group: root
    mode: '0644'
  tags: docker_proxy
  notify:
    - start inverseproxy docker

- name: Copy Docker Facts Collection script on server
  template:
    src: collect_docker_facts.sh.j2
    dest: /root/collect_docker_facts.sh
    owner: root
    group: root
    mode: '0700'

- name: add cron job to check Docker versions every day
  cron:
    name: collect docker facts
    minute: "1"
    hour: "2"
    job: /root/collect_docker_facts.sh
